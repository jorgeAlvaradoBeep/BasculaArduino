#include "HX711.h"
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#define CALIBRACION -443.84

#define DOUT_PIN 6  // Pin de datos del HX711
#define SCK_PIN 5   // Pin de reloj del HX711

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
#define SCREEN_ADDRESS 0x3C

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
HX711 scale(DOUT_PIN, SCK_PIN);

byte tara = 12;

#define SCREEN_WIDTH 128  // Ancho del display OLED
#define SCREEN_HEIGHT 64  // Alto del display OLED

long previousWeight = 0;        // Peso previo
const int weightThreshold = 1;  // Umbral de cambio de peso en gramos

const unsigned char PROGMEM logo[] = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe6, 0x00, 0x00, 0x00, 0x00, 0x47, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xfc, 0x0f, 0xf0, 0x3f, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xf8, 0x0f, 0xe0, 0x1f, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xf9, 0xef, 0xe7, 0xbf, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xf9, 0xef, 0xe7, 0xbf, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xf9, 0xef, 0xf7, 0xbf, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x01, 0xef, 0xf7, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xef, 0xf7, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xef, 0xf7, 0x05, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xde, 0xef, 0xf6, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xef, 0xf7, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x60, 0xef, 0xf7, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9e, 0xef, 0xf7, 0x7b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x4f, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xcf, 0xf3, 0xad, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x1c, 0x07, 0xc0, 0x18, 0x01, 0xe1, 0xe0, 0x06, 0x00, 0xfc, 0x07, 0x87, 0x83, 0x9e, 0x03,
  0x00, 0x18, 0x03, 0x80, 0x10, 0x01, 0xe0, 0xe0, 0x06, 0x00, 0x78, 0x01, 0x83, 0x83, 0x9c, 0x01,
  0x11, 0x19, 0xf1, 0x8e, 0x11, 0x91, 0xc0, 0xe2, 0x23, 0x1e, 0x38, 0xf1, 0xc1, 0xc7, 0x98, 0xf8,
  0xf1, 0xf1, 0xf1, 0x9f, 0xff, 0x9f, 0xcc, 0xfe, 0x3f, 0x9e, 0x31, 0xf9, 0xc0, 0xc7, 0x98, 0xf8,
  0xf1, 0xf1, 0xf1, 0x87, 0xff, 0x9f, 0x8c, 0x7e, 0x3f, 0x9e, 0x39, 0xf9, 0xc0, 0xc7, 0x98, 0xff,
  0xf1, 0xf1, 0xf1, 0xc0, 0x7f, 0x9f, 0x8c, 0x7e, 0x3f, 0x80, 0x79, 0xf9, 0xc4, 0x47, 0x98, 0xff,
  0xf1, 0xf1, 0xf1, 0xf0, 0x3f, 0x9f, 0x80, 0x7e, 0x3f, 0x80, 0xf9, 0xf9, 0xc6, 0x07, 0x98, 0xff,
  0xf1, 0xf1, 0xf1, 0xff, 0x1f, 0x9f, 0x00, 0x3e, 0x3f, 0x9c, 0x79, 0xf9, 0xc6, 0x07, 0x98, 0xfc,
  0xf1, 0xf1, 0xf1, 0x8f, 0x1f, 0x9f, 0x1e, 0x3e, 0x3f, 0x9e, 0x39, 0xf1, 0xc7, 0x07, 0x98, 0xf8,
  0xf1, 0xf8, 0x01, 0x80, 0x1f, 0x9f, 0x3f, 0x1e, 0x3e, 0x0c, 0x18, 0x01, 0x83, 0x87, 0x9c, 0x00,
  0xf1, 0xfc, 0x03, 0x80, 0x7f, 0x1e, 0x3f, 0x1e, 0x3e, 0x0c, 0x1c, 0x03, 0x83, 0xc7, 0x9e, 0x03,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3e, 0xf7, 0xe1, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3c, 0x67, 0xc0, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xfc, 0x67, 0x8e, 0x79, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3c, 0x07, 0x9e, 0x78, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1c, 0x67, 0x9e, 0x78, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0x9c, 0x67, 0xc0, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3e, 0xe7, 0xe1, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

void setup() {
  Serial.begin(9600);
  pinMode(tara, INPUT);

  //Iniciamos la pantalla OLED
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println("Fallo al iniciar el OLED");
    for (;;)
      ;
  }
  display.display();  // Inicializar la pantalla
  display.clearDisplay();
  display.drawBitmap(0, 0, logo, 128, 64, 1);  // Dibuja el logo
  display.display();
  delay(2000);             // Muestra el logo durante 2 segundos antes de continuar
  display.clearDisplay();  // Limpia la pantalla
  delay(3000);             // Esperar 2 segundos para que se pueda ver el mensaje de inicio
  display.clearDisplay();
  // Calibrar la báscula (debe hacerse cuando no haya nada en la báscula)
  display.setTextSize(3);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.print("Peso: ");
  display.setCursor(0, 25);
  display.print(0);
  display.print(" g");
  display.display();
  scale.set_scale(CALIBRACION);
  scale.tare();  // Restablecer el valor actual como tara
}

void loop() {


  long currentWeight = scale.get_units(10);  // Obtener el peso en gramos

  // Imprimir el peso solo si la diferencia es mayor que el umbral
  if (abs(currentWeight - previousWeight) >= weightThreshold) {
    display.clearDisplay();
    display.setTextSize(3);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(0, 0);
    display.print("Peso: ");
    display.setCursor(0, 25);
    display.print(currentWeight);
    display.print(" g");
    display.display();
    previousWeight = currentWeight;
  }

  delay(100);  // Esperar un poco antes de volver a medir
}


void anti_debounce(byte boton) {
  delay(100);
  while (!digitalRead(boton))
    ;  //Anti-Rebote
  delay(100);
}

void animateLogo() {
  for (int x = 0; x < SCREEN_WIDTH; x++) {
    for (int y = 0; y < SCREEN_HEIGHT; y++) {
      // Obtiene el byte que contiene el bit deseado
      byte byteValue = pgm_read_byte(&logo[(x / 8) + y * (SCREEN_WIDTH / 8)]);
      
      // Obtiene el valor del bit dentro del byte usando una máscara de bits
      bool pixelState = bitRead(byteValue, 7 - (x % 8));
      
      // Dibuja el píxel si está activo
      if (pixelState) {
        display.drawPixel(x, y, SSD1306_WHITE);
      }
    }
    display.display(); // Actualiza la pantalla después de dibujar una columna
    delay(10); // Añade un pequeño retraso para controlar la velocidad de la animación
  }
}
